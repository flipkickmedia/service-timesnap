#!/usr/bin/env bash

function create_fs_timesnap() {
  local config_file=$1
  local log_file=$2
  local excludes=$3
  #"--exclude '.pnpm' --exclude 'vendor' --exclude '.pnpm-store' --exclude '.wget-hsts' --exclude '.keychain' --exclude '.cme/backup' --exclude '.cme/bin' --exclude '.cme/exports' --exclude '.cme/icons' --exclude '.cme/images' --exclude '.cme/instances"
  # --exclude 'vendor' --exclude '.pnpm-store' --exclude '.wget-hsts' --exclude '.keychain' --exclude '.cme/backup' --exclude '.cme/bin' --exclude '.cme/exports' --exclude '.cme/icons' --exclude '.cme/images' --exclude '.cme/instances'
  local backup_path=$4
  local backup_current=$5
  local run_date=$6
  local reserve_space=$7
  local backup_target="${backup_path}/${run_date}"
  local backup_source=$8
  {
    echo "creating timesnap ${backup_path}"
    echo "excludes:${excludes}"
    echo "backup_path:${backup_path}"
    echo "backup_current:${backup_current}"
    echo "backup_target:${backup_target}"
    echo "backup_source:${backup_source}"
    echo "rsync --links --delete --recursive --times --atimes --executability --perms --hard-links --safe-links --force $excludes $backup_source $backup_target"
  } >>"${log_file}"

  if [[ ! -d ${backup_path} ]]; then
    mkdir -p ${backup_path}
  fi

  if [[ ! -d ${backup_target} ]]; then
    mkdir -p ${backup_target}
  fi

  if [ ! -L ${backup_current} ] || [ ! -e ${backup_current} ]; then
    rsync -v --links --delete --recursive --times --atimes --executability --perms --hard-links --safe-links --force $excludes $backup_source $backup_target
    ln -s $backup_target $backup_current
  else
    rsync -v --links --delete --recursive --archive --atimes --executability --hard-links --safe-links --force --exclude '.pnpm' --link-dest=$backup_current $backup_source $backup_target
    rm $backup_current
    ln -s $backup_target $backup_current
  fi

  # check space left on device, remove oldest directory whilst space is above 95%
  local device=$(df -P $backup_path | awk 'END{print $1}')
  space=$(df | grep ${device} | awk '{print $4}')
  if [[ $space -gt $reserve_space ]]; then
    echo "space remaining: ${space}"
  fi

  while [[ $space -lt $reserve_space ]]; do
    echo removing ${oldest}
    oldest=$(ls -c1 ${backup_path} | head -1)
    rm -rf $oldest
    space=$(df | grep ${device} | awk '{print $4}')
  done
}

function create_db_timesnap() {
  local config_file=$1
  local log_file=$2
  local databases=$2
  #"--exclude '.pnpm' --exclude 'vendor' --exclude '.pnpm-store' --exclude '.wget-hsts' --exclude '.keychain' --exclude '.cme/backup' --exclude '.cme/bin' --exclude '.cme/exports' --exclude '.cme/icons' --exclude '.cme/images' --exclude '.cme/instances"
  # --exclude 'vendor' --exclude '.pnpm-store' --exclude '.wget-hsts' --exclude '.keychain' --exclude '.cme/backup' --exclude '.cme/bin' --exclude '.cme/exports' --exclude '.cme/icons' --exclude '.cme/images' --exclude '.cme/instances'
  local backup_path=$4
  local backup_current=$5
  local run_date=$6
  local reserve_space=$7
  local backup_target="${backup_path}/${run_date}"
  local backup_source=$8
  {
    echo "creating timesnap ${backup_path}"
    echo "$(date) port          : ${PORT}"
    echo "$(date) user          : ${USER}"
    echo "$(date) sock          : ${SOCK}"
    echo "$(date) name          : ${NAME}"
    echo "$(date) pass          : *******"
    echo "$(date) sql_dump_file : ${sql_dump_file}"
    echo "$(date) source_dir    : ${source_dir}"
    echo "$(date) target_dir    : ${target_dir}"
  }
  
  DB_PROFILE=$($stoml_cmd "${config_file}" "Config.DB.Timesnap.Profile")
  USER=$($stoml_cmd "${config_file}" "Config.DB.${DB_PROFILE}.User")
  PASS=$($stoml_cmd "${config_file}" "Config.DB.${DB_PROFILE}.Password")

  if [ ! -d ${backup_target} ]; then
    mkdir -p "${backup_target}/current"
  fi

  if [ -f "${backup_target}/last.mariadb" ]; then
    # incremental backup
    od=$(cat "${backup_target}/last.mariadb")
    echo ${run_date} >"${backup_target}/last.mariadb"
    mariadb-backup --backup --databases="${databases}" --target-dir="${backup_target}/mariadb-${d}" --incremental-basedir="${backup_target}/mariadb-${od}" --user="${USER}" --password="${PASS}"
    if [[ $? -eq 0 ]]; then
      mv "${backup_target}/current" "${backup_target}/mariadb-${od}"
      echo "MariaDB incremental backup complete"
      echo "stored at ${backup_target}/mariadb-${d}"
    else
      echo "incremental backup failed"
    fi
  fi

  if [ ! -f "${backup_target}/last.mariadb" ]; then
    # full backup
    # uses options stored in /etc/mysql/mariadb.conf.d/70-backup.cnf
    mariadb-backup --backup --target-dir="${backup_target}/mariadb-${d}" --user="${USER}" --password="${PASS}"

    if [[ $? -eq 0 ]]; then
      echo ${d} >"${backup_target}/last.mariadb"
      echo "MariaDB full backup complete"
      echo "stored at ${backup_target}/mariadb-${d}"
    else
      echo "full backup failed"
    fi
  fi
}
